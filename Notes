Suggestion -> Ctrl + Space
Comment -> Ctrl + /
Copy a full line and Paste in the next line -> Ctrl+D
Editor, Console, Project explorer
pass -> No operation, placeholder for future code




Internal Methods(built-in functions)
--------------------------------------
print() -> display
type() -> the data type of the value
int() -> Tries to convert into an Integer
input() -> Take value from the user, by default it is always a String
Indentation -> Spacing Tab Space- 4 spaces
range(start, stop) -> generate numbers from start value to stop-1 value

Variables
----------------------------
Names given to values
Is used to store data or values so that they can be refered or manipulated in the future.

DataTypes: Dynamically typed
-----------------------------------
Primitives -> Single value

Integers(int) -> negatives, 0, positives
Decimal(float) -> 0.0,-3.9,6.9
English(String) -> "" or ''
Boolean -> True or False

Type Conversion
----------------------------------------
converting one variable from one datatype to another datatype

Operators:
----------------------------------------
Arithmetic Operators:
+,-,/,*

// -> floor division -> return integer(which is present before the decimal point)
% -> Modulus -> returns reminder
** -> Exponentiation/Power

Comparison(Relational) Operators:
    End result is always Boolean(True/False)

1. == equal to
2. != Not equal to
3. >
4. <
5. <=
6. >=

Logical Operator:

1. AND -> True if both the values are True
2. OR -> True if one of the value is True
3. NOT -> True if the value is False

Assignment Operator:

1. =
2. += Add and assign
3. -=
4. *=
5. /=
6. %=
7. //=
8. **=

Conditional Statements(if condition):

Allow you to control the flow of the program by executing specific block of code. Based on the
condition

Syntax: -> format to write code

    Simple IF condition

    if CONDITION:
        Block of code
   ----------------------------------

   If-ELSE Statements

    if CONDITION:
        Block of code
    else:
        Block of code
   ----------------------------------
    if - elif - else Statement

    if CONDITION:
        block of code
    elif CONDITION:
        block of code
    else:
        block of code
-------------------------------------
    Nested IF Statements:
        if within another if

    if CONDITION:
        if CONDITION:
            block of code


Loops:
    Loop are used to repeatedly execute a block of code as long as a specific condition is met.

1. FOR loop
2. WHILE loop

FOR Loop:
---------------------------------------------
FOR loop is used to iterate over a sequence.

Syntax:

        for iterator in iterable:
            block of code

Iterable: if you have multiple objects in one variable when it is a iterable.
l = [1,2,3,4,5,6]

Continue & Break:
--------------------------
Continue -> SKIP
Break -> STOP



WHILE Loops:
--------------------------------------------------------------------------

Syntax:
    while condition:
        .................
        .................



Functions in Python
---------------------------------------------------------
A function is a block of organised, reusable code that performs a specific task.

Types:
    1. Built-in functions
    2. User defined functions
        1. Default function/ No parameter function/ No Args function
        2. Parameterized Function

Defining a Function:
-------------------------
def -> define it is a keyword
functionName()

Syntax:
    def function_name():
        pass

Parameterized Function Syntax:
    def function_name(parameter):
        pass

    function_name(parameter)

Local Variable
Global Variable

Lambda Functions
-----------------------------------------------------------------------------------------------------
small, anonymous -> it will not have def , function name, return type

Recursive Functions:
------------------------------------------------------------------------------------------------------
A function that can call itself




List: -> []
------------------------
List is a collection of items that are ordered(index), changeable(mutable), and allow duplicate values.

List Operations:
------------------------------
Addition operators
1. append() -> adds an item to the end of the list
2. insert() -> adds an item at a specific index
3. extend() -> adds multiple items or another list to the list

Removing Operators:
1. remove() -> remove the first occurrence of a specific element.
2. pop() -> remove and return the element at a specific index or the last element if no index is specified
3. clear() -> removes all the elements from the list

List Functions:
--------------------------------------
1. len() -> returns the length of the list
2. max() -> returns the largest item
3. min()
4. sum()

Iterating Over a List:


Tuples in python: -> ()
---------------------------------------------------------------------------------------------------
Collection of items that are ordered, unchangeable(immutable), and allow duplicate values.

Bank Account
1. name - T
2. address - L
3. DOB - L
4. Aadhar - T
5. pan card - T
6. mobile - L
7. email - L
8. account number - T
9. balance - L

Why Tuple?
1. Immutability - data integrity
2. Faster access - index

Creating a tuple
() - ',' separated

Tuple Ops:
1. Read
2. Concatenation
3. len()


Comparing Tuples and list

Feature                   Tuple                       List
Mutability                Immutable                   Mutable
Syntax                    ()                          []
Use Case                  Fixed items                 Dynamic items
Performance               Faster than list            Slower than tuple


Dictionaries in Python: -> {key:value}
-------------------------------------------------------------------------------------------------------
Collection of unordered ,mutable and no-duplicate keys are allowed key-value pair.

Creating                                                  -> Create
Accessing -> keys or get()                                -> Retrive
Adding or updating items                                  -> Update
remove -> pop(key), popitem(), del keyword,clear()        -> Delete
CRUD Operations

Dictionary Methods:
------------------------------
keys() -> return all the keys in the dictionary in the form of a list
values() -> return all the values in the dictionary in the form of a list
items() -> return all the items in the dictionary in the form of a list


Looping through Dictionaries:
---------------------------------
1. looping through keys
2. looping through values
3. looping through both keys & values

Classes and OOPS:
---------------------------------