UI -> User Interface, Web Developers -> HTML, CSS, JS, React
UX -> User Experience, Designers -> Figma, adobe



HTML

Hypertext Markup Language[HTML] is the standard Language for creating web pages
It structures the content on a webpage using elements and tags

Tag -> <tag>
elements ->  <tag> Content </tag>

Metadata -> data of data


3. Common HTML tags

1. Heading Tags <h1> to <h6>
2. Paragraph Tags <p>
3. Anchor Tag <a> or Link Tag
4. Image Tag <img>
5. List Tag
    1. Ordered List
    2. Unordered List

Day 2 -> HTML Forms and Semantic elements

Form:

<form>

</form>

<input>
<label></label>
1. text input 
2. password input
3. email
4. radio buttons
5. number
6. checkboxes
7. dropdown menu


Semantic Elements:

Semantic elements clearly define their purpose, improve readability and accessibility

1. Header  -> <header>   </header> -> Headings of the page
2. Footer -> <footer>    </footer> -> End info
3. Main  -> <main> </main>         -> Content of the page
4. Aside -> <aside> </aside>       -> sidebar or advertisement
5. Article -> <article> </article> -> independent content which not related to the website (blog post, news letter, news article...)
6. Section -> <section> </section> -> grouped content


Day 3 -> CSS Introduction

CSS -> Cascading Style Sheets

Why Use CSS?
1. Separate content(HTML) from design
2. Add style to HTML elements -> more visually appealing
3. Enables responsive design for different screen sizes

Types of CSS:

1. Inline CSS -> inline style attributes

    <p style="color:blue; font-size: 20px;">This is a CSS Class.</p>

2. Internal CSS -> <style> tag in the <head> section
3. External CSS -> <link> tag in the <head> section



CSS Syntax:

Selector -> The HTML Element to style
Property -> The aspect of the element to change (eg: color, font size, etc.)
Value -> The value to apply to the property


selector{
    property: value;
}

Selectors in CSS:

1. universal selector (*)
2. Element selector
3. Class selector (.className)
4. ID selector (#idName)



CSS Property:

1. Colors:
    1. test color -> color
    2. background color -> background-color

2. Font:
    1. font size -> font-size
    2. font family -> font-family
    3. font weight -> font-weight

3. Border



4. Margins and Paddings

Box Model -> Margin, border, padding, content


JavaScript:
================
1. Lightweight
2. Interpreted programming Language
3. Used for Dynamic Web content and interactive applications
4. Client-side scripting language
5. Integrated with HTML and CSS


How to add JS to an HTML file?
--------------------------------
1. Inline: if JS is written inside HTML tags
2. Internal: inside the head tag <script> </script>
3. External:adding external js file


Basics JS:

1. Variables
    Containers for storing data values
    var x = 5; // can be updated and redeclared
    let y = 10; // can be updated but not redeclared
    const pi = 3.14; // cannot be updated or redeclared

2. Data Types:
    1. Primitive
        String, number, boolean, undefined, null
    2. non-Primitive
        Object-json {
            "name": "John",
            "age": 30
        }, Array, Function

3. Operators:
    1. Arithmetic: +, -, \*, /, %
    2. Assignment: =, +=, -=, *=, /=, %=
    3. Comparison: ==, !=, >, <, >=, <=, ===, !==
    4. Logical: &&, ||, !


4. Basic Input/Output:
    1. prompt()
    2. alert()
    3. console.log()


5. Control Statements:
    1. If Statements:

        if(condition){
            
        }

    2. Ternary Operators:
        
        condition ? value_if_true : value_if_false